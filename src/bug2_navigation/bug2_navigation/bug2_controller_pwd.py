import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, QoSReliabilityPolicy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
import numpy as np
import sys
import math

class Bug2Controller(Node):
    def __init__(self, goal_x, goal_y):
        super().__init__('bug2_controller')
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)

        qos_profile = QoSProfile(reliability=QoSReliabilityPolicy.BEST_EFFORT, depth=10)
        self.create_subscription(LaserScan, '/scan', self.lidar_callback, qos_profile)
        self.create_subscription(Odometry, '/odom', self.odom_callback, 10)

        self.goal_x = goal_x
        self.goal_y = goal_y
        self.current_x = 0.0
        self.current_y = 0.0
        self.obstacle_detected = False
        self.following_obstacle = False
        self.mline_distance = self.distance_to_goal()
        self.rate = self.create_rate(10)

    def distance_to_goal(self):
        """ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ """
        return math.sqrt((self.goal_x - self.current_x) ** 2 + (self.goal_y - self.current_y) ** 2)

    def is_at_goal(self):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á """
        return self.distance_to_goal() < 0.2  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ tolerance ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

    def can_move_straight_to_goal(self, msg):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏•‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà """
        front_distance = msg.ranges[len(msg.ranges) // 2]
        return front_distance > 0.5  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤

    def lidar_callback(self, msg):
        """ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å LiDAR ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á """
        self.obstacle_detected = not self.can_move_straight_to_goal(msg)

    def odom_callback(self, msg):
        """ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô """
        self.current_x = msg.pose.pose.position.x
        self.current_y = msg.pose.pose.position.y

    def run(self):
        """ ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á """
        twist = Twist()
        
        while rclpy.ok():
            rclpy.spin_once(self)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LiDAR ‡πÅ‡∏•‡∏∞ Odom
            
            if self.is_at_goal():
                print("‚úÖ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå")
                twist.linear.x = 0.0
                twist.angular.z = 0.0
                self.cmd_vel_pub.publish(twist)
                break

            if not self.obstacle_detected:
                print("‚û°Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
                twist.linear.x = 0.2
                twist.angular.z = 0.0
            else:
                print("‚ö†Ô∏è ‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö")
                self.follow_obstacle()
                continue  # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà

            self.cmd_vel_pub.publish(twist)
            self.rate.sleep()

    def follow_obstacle(self):
        """ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ M-line ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ """
        twist = Twist()
        while rclpy.ok():
            rclpy.spin_once(self)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            
            if not self.obstacle_detected:
                current_distance = self.distance_to_goal()
                if current_distance < self.mline_distance:
                    print("üîÑ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà M-line ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
                    self.mline_distance = current_distance
                    return  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á

            # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
            twist.linear.x = 0.1  # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤‡πÜ
            twist.angular.z = 0.3  # ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
            self.cmd_vel_pub.publish(twist)
            self.rate.sleep()

def main():
    rclpy.init()
    if len(sys.argv) != 3:
        print("Usage: ros2 run bug2_navigation bug2_controller <goal_x> <goal_y>")
        return
    
    goal_x = float(sys.argv[1])
    goal_y = float(sys.argv[2])
    
    node = Bug2Controller(goal_x, goal_y)
    node.run()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
